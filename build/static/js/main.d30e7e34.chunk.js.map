{"version":3,"sources":["taskboard/TaskboardTypes.ts","taskboard/TaskboardItemFormModal.tsx","shared/BaseTooltip.tsx","taskboard/TaskboardItemCard.tsx","shared/SharedUtils.ts","taskboard/TaskboardCol.tsx","taskboard/Taskboard.tsx","shared/SharedHooks.ts","App.jsx","index.jsx"],"names":["TaskboardItemStatus","TaskboardItemFormModal","visible","initialValues","onCancel","onOk","Form","useForm","form","inputRef","useRef","useEffect","current","focus","resetFields","title","destroyOnClose","forceRender","submit","autoComplete","layout","onFinish","values","Item","name","label","rules","required","message","max","ref","autoFocus","TextArea","rows","BaseTooltip","props","mouseEnterDelay","StyledCard","styled","Card","$isDragging","TaskboardItemCardTitle","Typography","Title","DeleteMenuItem","Menu","red","primary","TaskboardItemCard","item","status","isDragging","onEdit","onDelete","size","overlay","level","ellipsis","extra","icon","EditOutlined","onClick","DeleteOutlined","Modal","confirm","content","itemToDelete","trigger","MoreOutlined","description","Paragraph","type","colors","geekblue","TaskboardColRoot","DroppableRoot","div","isDraggingOver","TaskboardCol","items","onClickAdd","length","className","droppableId","provided","snapshot","innerRef","droppableProps","map","index","draggableId","_id","draggableProps","dragHandleProps","placeholder","TaskboardRoot","defaultItems","TO_DO","IN_PROGRESS","DONE","Taskboard","key","initialValue","getValueFromStorage","useCallback","goTrySync","JSON","parse","localStorage","getItem","data","useState","state","setState","handleStorageChange","window","addEventListener","removeEventListener","setItem","stringify","useSyncedState","itemsByStatus","setItemsByStatus","isModalVisible","setIsModalVisible","itemToEdit","setItemToEdit","openTaskItemModal","handleDelete","produce","draft","filter","useMemo","onDragEnd","source","destination","splice","removed","Object","undefined","draftItem","flatMap","find","push","Date","now","toString","AppStyle","headerContainer","zIndex","boxShadow","display","justifyContent","alignItems","App","style","margin","src","alt","height","width","marginBottom","href","target","textDecoration","rel","overflow","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d30e7e34.chunk.js","sourcesContent":["export interface TaskboardItem {\n  _id: string;\n  title: string;\n  description: string;\n}\n\nexport enum TaskboardItemStatus {\n  TO_DO = 'To Do',\n  IN_PROGRESS = 'In Progress',\n  DONE = 'Done',\n}\n","import { useEffect, useRef } from 'react';\nimport { Modal, Form, ModalProps, Input } from 'antd';\nimport { TaskboardItem } from './TaskboardTypes';\n\nexport type TaskboardItemFormValues = Pick<\n  TaskboardItem,\n  'title' | 'description'\n>;\n\ntype TaskboardItemFormModalProps = Pick<ModalProps, 'visible'> & {\n  initialValues: TaskboardItemFormValues;\n  onCancel: VoidFunction;\n  onOk: (values: TaskboardItemFormValues) => void;\n};\n\nfunction TaskboardItemFormModal({\n  visible,\n  initialValues,\n  onCancel,\n  onOk,\n}: TaskboardItemFormModalProps) {\n  const [form] = Form.useForm<TaskboardItemFormValues>();\n\n  const inputRef = useRef<Input>(null);\n\n  useEffect(() => {\n    if (visible) {\n      // Focus on the first input when the modal is opened\n      inputRef.current?.focus();\n      form.resetFields();\n    }\n  }, [form, visible]);\n\n  return (\n    <Modal\n      title=\"Add Item\"\n      visible={visible}\n      destroyOnClose\n      // To make dynamically changing initialValues work with Form\n      forceRender\n      onCancel={onCancel}\n      onOk={() => form.submit()}\n    >\n      <Form\n        autoComplete=\"off\"\n        form={form}\n        layout=\"vertical\"\n        initialValues={initialValues}\n        onFinish={(values) => {\n          onOk(values);\n          form.resetFields();\n          onCancel();\n        }}\n      >\n        <Form.Item\n          name=\"title\"\n          label=\"Title\"\n          rules={[\n            { required: true, message: \"'Title' is required\" },\n            {\n              max: 100,\n              message: \"'Title' can not be longer than 100 characters\",\n            },\n          ]}\n        >\n          <Input ref={inputRef} autoFocus />\n        </Form.Item>\n        <Form.Item\n          name=\"description\"\n          label=\"Description\"\n          rules={[\n            { required: true, message: \"'Description' is required\" },\n            {\n              max: 400,\n              message: \"'Description' can not be longer than 400 characters\",\n            },\n          ]}\n        >\n          <Input.TextArea rows={4} />\n        </Form.Item>\n      </Form>\n    </Modal>\n  );\n}\n\nexport default TaskboardItemFormModal;\n","import { Tooltip, TooltipProps } from 'antd';\n\ntype BaseTooltipProps = TooltipProps;\n\nfunction BaseTooltip(props: BaseTooltipProps) {\n  return <Tooltip mouseEnterDelay={1.5} {...props} />;\n}\n\nexport default BaseTooltip;\n","import React from 'react';\nimport { Button, Card, Modal, Typography, Dropdown, Menu } from 'antd';\nimport { TaskboardItem, TaskboardItemStatus } from './TaskboardTypes';\nimport { DeleteOutlined, EditOutlined, MoreOutlined } from '@ant-design/icons';\nimport { red } from '@ant-design/colors';\nimport styled from 'styled-components';\nimport BaseTooltip from '../shared/BaseTooltip';\n\ninterface StyledCardProps {\n  $isDragging: boolean;\n}\n\nconst StyledCard = styled(Card)<StyledCardProps>`\n  margin: 0.5rem;\n  padding: 0.5rem;\n  background-color: ${({ $isDragging }) => ($isDragging ? '#fafafa' : '#fff')};\n`;\n\nconst TaskboardItemCardTitle = styled(Typography.Title)`\n  white-space: pre-wrap;\n  // To make ellipsis of the title visible.\n  // Without this margin, it can be go behind the \"extra\" component.\n  // So, we give it a little space.\n  margin-right: 0.25rem;\n`;\n\nconst DeleteMenuItem = styled(Menu.Item)`\n  color: ${red.primary};\n`;\n\nexport interface TaskboardItemCardProps {\n  item: TaskboardItem;\n  isDragging: boolean;\n  status: TaskboardItemStatus;\n  onEdit: (itemToEdit: TaskboardItem) => void;\n  onDelete: (args: {\n    status: TaskboardItemStatus;\n    itemToDelete: TaskboardItem;\n  }) => void;\n}\n\nfunction TaskboardItemCard({\n  item,\n  status,\n  isDragging,\n  onEdit,\n  onDelete,\n}: TaskboardItemCardProps) {\n  return (\n    <StyledCard\n      $isDragging={isDragging}\n      size=\"small\"\n      title={\n        <BaseTooltip overlay={item.title}>\n          {/* styled(Typography.Title) throws an error in console about \n          forwarding ref in function components.\n          Because Typography.Title doesn't accept a ref.\n          So, we just placed a span tag here. */}\n          <span>\n            <TaskboardItemCardTitle level={5} ellipsis={{ rows: 2 }}>\n              {item.title}\n            </TaskboardItemCardTitle>\n          </span>\n        </BaseTooltip>\n      }\n      extra={\n        <Dropdown\n          overlay={\n            <Menu>\n              <Menu.Item icon={<EditOutlined />} onClick={() => onEdit(item)}>\n                Edit\n              </Menu.Item>\n              <DeleteMenuItem\n                icon={<DeleteOutlined />}\n                onClick={() =>\n                  Modal.confirm({\n                    title: 'Delete?',\n                    content: `Are you sure to delete \"${item.title}\"?`,\n                    onOk: () =>\n                      onDelete({\n                        status,\n                        itemToDelete: item,\n                      }),\n                  })\n                }\n              >\n                Delete\n              </DeleteMenuItem>\n            </Menu>\n          }\n          trigger={['click']}\n        >\n          <Button size=\"small\" icon={<MoreOutlined />} />\n        </Dropdown>\n      }\n    >\n      <BaseTooltip overlay={item.description}>\n        <Typography.Paragraph type=\"secondary\" ellipsis={{ rows: 2 }}>\n          {item.description}\n        </Typography.Paragraph>\n      </BaseTooltip>\n    </StyledCard>\n  );\n}\n\nexport default TaskboardItemCard;\n","import { geekblue } from '@ant-design/colors';\n\nexport const colors = {\n  primary: geekblue,\n};\n","import { Droppable, Draggable } from 'react-beautiful-dnd'\nimport styled from 'styled-components'\nimport { Button, Card } from 'antd'\nimport { TaskboardItem, TaskboardItemStatus } from './TaskboardTypes'\nimport TaskboardItemCard, { TaskboardItemCardProps } from './TaskboardItemCard'\nimport { colors } from '../shared/SharedUtils'\n\nconst TaskboardColRoot = styled(Card)`\n  user-select: none;\n  flex: 1;\n  margin: 0.5rem;\n  display: flex;\n  flex-direction: column;\n  // To force each flex item to have equal width\n  // even if they have long texts with no spaces etc.\n  min-width: 0;\n  > .ant-card-body {\n    overflow: hidden;\n    height: 100%;\n    padding: 0;\n  }\n`\n\ninterface DroppableRootProps {\n  isDraggingOver: boolean\n}\n\nconst DroppableRoot = styled.div<DroppableRootProps>`\n  height: 100%;\n  overflow-y: auto;\n  background-color: ${({ isDraggingOver }) =>\n    isDraggingOver ? colors.primary[2] : colors.primary[1]};\n`\n\nexport type TaskboardColProps = Pick<TaskboardItemCardProps,'onEdit' | 'onDelete'> & {\n  items: TaskboardItem[]\n  status: TaskboardItemStatus\n  onClickAdd?: VoidFunction\n}\n\nfunction TaskboardCol({ items, status, onClickAdd, onEdit, onDelete }: TaskboardColProps) {\n  return (\n    <TaskboardColRoot title={`${status} (${items.length})`}\n      extra={\n        onClickAdd && (\n          <Button type=\"primary\" onClick={onClickAdd}>\n            <i className=\"fas fa-plus\">&nbsp;Add</i>\n          </Button>\n        )\n      }\n    >\n      <Droppable droppableId={status}>\n        {(provided, snapshot) => (\n          <DroppableRoot\n            ref={provided.innerRef}\n            {...provided.droppableProps}\n            isDraggingOver={snapshot.isDraggingOver}\n          >\n            {items.map((item, index) => {\n              return (\n                <Draggable key={item._id} draggableId={item._id} index={index}>\n                  {(provided, snapshot) => (\n                    <div\n                      key={item._id}\n                      ref={provided.innerRef}\n                      {...provided.draggableProps}\n                      {...provided.dragHandleProps}\n                    >\n                      <TaskboardItemCard\n                        item={item}\n                        status={status}\n                        isDragging={snapshot.isDragging}\n                        onEdit={onEdit}\n                        onDelete={onDelete}\n                      />\n                    </div>\n                  )}\n                </Draggable>\n              )\n            })}\n            {provided.placeholder}\n          </DroppableRoot>\n        )}\n      </Droppable>\n    </TaskboardColRoot>\n  )\n}\n\nexport default TaskboardCol\n","import { DragDropContext, DragDropContextProps } from 'react-beautiful-dnd'\nimport { useMemo, useState } from 'react'\nimport produce from 'immer'\nimport styled from 'styled-components'\nimport { TaskboardItem, TaskboardItemStatus } from './TaskboardTypes'\nimport TaskboardItemFormModal, { TaskboardItemFormValues } from './TaskboardItemFormModal'\nimport TaskboardCol, { TaskboardColProps } from './TaskboardCol'\nimport { useSyncedState } from '../shared/SharedHooks'\n\nconst generateId = () => Date.now().toString()\n\nconst TaskboardRoot = styled.div`\n  min-height: 0;\n  height: 100%;\n  min-width: 800px;\n  max-width: 1400px;\n  margin: auto;\n`\n\nconst defaultItems = {\n  [TaskboardItemStatus.TO_DO]: [],\n  [TaskboardItemStatus.IN_PROGRESS]: [],\n  [TaskboardItemStatus.DONE]: [],\n};\n\ntype TaskboardData = Record<TaskboardItemStatus, TaskboardItem[]>;\n\nfunction Taskboard() {\n  const [itemsByStatus, setItemsByStatus] = useSyncedState<TaskboardData>(\n    'itemsByStatus',\n    defaultItems\n  );\n\n  const handleDragEnd: DragDropContextProps['onDragEnd'] = ({\n    source,\n    destination,\n  }) => {\n    setItemsByStatus((current) =>\n      produce(current, (draft) => {\n        // dropped outside the list\n        if (!destination) {\n          return;\n        }\n        const [removed] = draft[\n          source.droppableId as TaskboardItemStatus\n        ].splice(source.index, 1);\n        draft[destination.droppableId as TaskboardItemStatus].splice(\n          destination.index,\n          0,\n          removed\n        );\n      })\n    );\n  };\n\n  const [isModalVisible, setIsModalVisible] = useState(false)\n\n  const [itemToEdit, setItemToEdit] = useState<TaskboardItem | null>(null)\n\n  const openTaskItemModal = (itemToEdit: TaskboardItem | null) => {\n    setItemToEdit(itemToEdit)\n    setIsModalVisible(true)\n  }\n\n  const closeTaskItemModal = () => {\n    setItemToEdit(null)\n    setIsModalVisible(false)\n  }\n\n  const handleDelete: TaskboardColProps['onDelete'] = ({\n    status,\n    itemToDelete,\n  }) =>\n    setItemsByStatus((current) =>\n      produce(current, (draft) => {\n        draft[status] = draft[status].filter(\n          (item) => item._id !== itemToDelete._id\n        )\n      })\n    )\n\n  const initialValues = useMemo<TaskboardItemFormValues>(\n    () => ({\n      title: itemToEdit?.title ?? '',\n      description: itemToEdit?.description ?? '',\n    }),\n    [itemToEdit]\n  )\n\n  return (\n    <>\n      <DragDropContext onDragEnd={handleDragEnd}>\n        <TaskboardRoot>\n          <div className=\"d-flex\">\n            {Object.values(TaskboardItemStatus).map((status) => (\n              <TaskboardCol\n                key={status}\n                status={status}\n                items={itemsByStatus[status]}\n                onClickAdd={\n                  status === TaskboardItemStatus.TO_DO\n                    ? () => openTaskItemModal(null)\n                    : undefined\n                }\n                onEdit={openTaskItemModal}\n                onDelete={handleDelete}\n              />\n            ))}\n          </div>\n        </TaskboardRoot>\n      </DragDropContext>\n\n      <TaskboardItemFormModal\n        visible={isModalVisible}\n        onCancel={closeTaskItemModal}\n        onOk={(values) => {\n          setItemsByStatus((current) =>\n            produce(current, (draft) => {\n              if (itemToEdit) {\n                // Editing existing item\n                const draftItem = Object.values(draft)\n                  .flatMap((items) => items)\n                  .find((item) => item._id === itemToEdit._id);\n                if (draftItem) {\n                  draftItem.title = values.title;\n                  draftItem.description = values.description;\n                }\n              } else {\n                draft[TaskboardItemStatus.TO_DO].push({\n                  ...values,\n                  _id: generateId()\n                })\n              }\n            })\n          )\n        }}\n        initialValues={initialValues}\n      />\n\n    </>\n  )\n}\n\nexport default Taskboard","import { goTrySync } from 'go-try';\nimport React, { useCallback, useEffect, useState } from 'react';\n\n// Syncs state to localStorage and vice versa\nexport function useSyncedState<T>(\n  key: string,\n  initialValue: T\n): [T, React.Dispatch<React.SetStateAction<T>>] {\n  const getValueFromStorage = useCallback(\n    () =>\n      goTrySync(() => JSON.parse(localStorage.getItem(key) ?? '')).data ??\n      initialValue,\n    [initialValue, key]\n  );\n\n  const [state, setState] = useState<T>(() => getValueFromStorage());\n\n  useEffect(() => {\n    function handleStorageChange() {\n      setState(getValueFromStorage);\n    }\n\n    window.addEventListener('storage', handleStorageChange);\n\n    return () => {\n      window.removeEventListener('storage', handleStorageChange);\n    };\n  }, [getValueFromStorage]);\n\n  useEffect(() => {\n    localStorage.setItem(key, JSON.stringify(state));\n  }, [key, state]);\n\n  return [state, setState];\n}\n","import Taskboard from './taskboard/Taskboard';\n\nconst AppStyle = {\n  headerContainer: {\n    zIndex: 10,\n    boxShadow: '2px 2px 8px 6px #979797',\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n  },\n};\n\nconst App = () => {\n  return (\n    <>\n      <div\n        className=\"m-0 p-1 text-light bg-secondary\"\n        style={AppStyle.headerContainer}\n      >\n        <div\n          style={{\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <div style={{ margin: '0 0.9rem' }}>\n            <img\n              src=\"/images/logos/logo-200.png\"\n              alt=\"LexusCuminLogo\"\n              style={{ height: '3rem', width: '3rem' }}\n            />\n          </div>\n          <div>\n            <div className=\"h4\" style={{ marginBottom: '0' }}>\n              LexusCumin\n            </div>\n            <div>Free TaskManagement Tool</div>\n          </div>\n        </div>\n        <div style={{ margin: '0 1rem' }}>\n          <a\n            href=\"https://github.com/lexuscreations/lexuscumin\"\n            target=\"_blank\"\n            style={{ textDecoration: 'none' }}\n            rel=\"noopener noreferrer\"\n          >\n            <img\n              src=\"/images/icons/code-edit.png\"\n              alt=\"githubLink\"\n              style={{ height: '3rem', width: '3rem' }}\n            />\n          </a>\n        </div>\n      </div>\n      <div style={{ overflow: 'auto' }}>\n        <Taskboard />\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport 'antd/dist/antd.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)"],"sourceRoot":""}